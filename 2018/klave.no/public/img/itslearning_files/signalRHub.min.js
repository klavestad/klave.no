!function (e, r, n) { "use strict"; function o(r, n) { return function () { n.apply(r, e.makeArray(arguments)) } } function t(r, n) { var t, a, i, u, s; for (t in r) if (r.hasOwnProperty(t)) { if (a = r[t], !a.hubName) continue; s = n ? a.on : a.off; for (i in a.client) if (a.client.hasOwnProperty(i)) { if (u = a.client[i], !e.isFunction(u)) continue; s.call(a, i, o(a, u)) } } } if ("function" != typeof e.signalR) throw new Error("SignalR: SignalR is not loaded. Please ensure jquery.signalR-x.js is referenced before ~/signalr/js."); var a = e.signalR; e.hubConnection.prototype.createHubProxies = function () { var r = {}; return this.starting(function () { t(r, !0), this._registerSubscribedHubs() }).disconnected(function () { t(r, !1) }), r.instantMessageHub = this.createHubProxy("instantMessageHub"), r.instantMessageHub.client = {}, r.instantMessageHub.server = { alertNewMessage: function (n, o) { return r.instantMessageHub.invoke.apply(r.instantMessageHub, e.merge(["AlertNewMessage"], e.makeArray(arguments))) } }, r.learningPathHub = this.createHubProxy("learningPathHub"), r.learningPathHub.client = {}, r.learningPathHub.server = { alertNewElementAccessGranted: function (n, o, t, a) { return r.learningPathHub.invoke.apply(r.learningPathHub, e.merge(["AlertNewElementAccessGranted"], e.makeArray(arguments))) } }, r.uploadProgressNotificationHub = this.createHubProxy("uploadProgressNotificationHub"), r.uploadProgressNotificationHub.client = {}, r.uploadProgressNotificationHub.server = { abortUpload: function () { return r.uploadProgressNotificationHub.invoke.apply(r.uploadProgressNotificationHub, e.merge(["AbortUpload"], e.makeArray(arguments))) }, joinBackendGroup: function () { return r.uploadProgressNotificationHub.invoke.apply(r.uploadProgressNotificationHub, e.merge(["JoinBackendGroup"], e.makeArray(arguments))) }, updateUploadProgress: function (n, o) { return r.uploadProgressNotificationHub.invoke.apply(r.uploadProgressNotificationHub, e.merge(["UpdateUploadProgress"], e.makeArray(arguments))) }, uploadAborted: function (n) { return r.uploadProgressNotificationHub.invoke.apply(r.uploadProgressNotificationHub, e.merge(["UploadAborted"], e.makeArray(arguments))) }, uploadCompleted: function (n, o) { return r.uploadProgressNotificationHub.invoke.apply(r.uploadProgressNotificationHub, e.merge(["UploadCompleted"], e.makeArray(arguments))) }, uploadError: function (n, o) { return r.uploadProgressNotificationHub.invoke.apply(r.uploadProgressNotificationHub, e.merge(["UploadError"], e.makeArray(arguments))) } }, r }, a.hub = e.hubConnection("/signalr", { useDefaultPath: !1 }), e.extend(a, a.hub.createHubProxies()) }(window.jQuery, window);